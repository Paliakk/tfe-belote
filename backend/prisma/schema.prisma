// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Chargement des variables d’environnement
// --- Début du fichier schema.prisma ---
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Joueur {
  id                Int      @id @default(autoincrement())
  username          String   @unique
  email             String   @unique
  passwordHash      String?
  estConnecte       Boolean  @default(false)
  derniereConnexion DateTime @default(now())
  connectionId      String?

  // --- Auth0
  auth0Sub    String? @unique
  displayName String?
  avatarUrl   String?

  mains             Main[]
  encheres          Enchere[]
  equipes           EquipeJoueur[]
  plisGagnes        Pli[]          @relation("GagnantPli")
  donneurDeManches  Manche[]       @relation("Donneur")
  beloteDansManches Manche[]       @relation("Beloteur")
  createurLobbys    Lobby[]        @relation("CreateurLobby")
  pliCartes         PliCarte[]
  lobbys            LobbyJoueur[]
  
  notificationsSent     Notification[] @relation("NotificationSender")
  notificationsReceived Notification[] @relation("NotificationReceiver")

  // Friends / Invites (NEW)
  friendRequestsSent     FriendRequest[] @relation("FriendRequestFrom")
  friendRequestsReceived FriendRequest[] @relation("FriendRequestTo")
  friendshipsA           Friendship[]    @relation("FriendshipA")
  friendshipsB           Friendship[]    @relation("FriendshipB")
  lobbyInvitesSent       LobbyInvite[]   @relation("LobbyInviteFrom")
  lobbyInvitesReceived   LobbyInvite[]   @relation("LobbyInviteTo")
}

model Couleur {
  id           Int       @id @default(autoincrement())
  nom          String    @unique
  cartes       Carte[]
  manchesAtout Manche[]  @relation("CouleurAtout")
  encheres     Enchere[]
}

model Carte {
  id             Int    @id @default(autoincrement())
  couleurId      Int
  valeur         String
  pointsAtout    Int
  pointsNonAtout Int

  couleur       Couleur    @relation(fields: [couleurId], references: [id])
  mains         Main[]
  pliCartes     PliCarte[]
  retourneeDans Manche[]   @relation("CarteRetournee")

  @@unique([couleurId, valeur])
}

model Partie {
  id            Int          @id @default(autoincrement())
  statut        PartieStatut @default(en_attente)
  createdAt     DateTime     @default(now())
  scoreMax      Int
  nombreJoueurs Int          @default(4)

  equipes Equipe[]
  manches Manche[] @relation("Partie_Manches")
  lobby   Lobby?

  mancheCouranteId Int?    @unique
  mancheCourante   Manche? @relation("Partie_MancheCourante", fields: [mancheCouranteId], references: [id])
}

enum PartieStatut {
  en_attente
  en_cours
  finie
  abandonnee
}

model Equipe {
  id       Int @id @default(autoincrement())
  partieId Int
  numero   Int

  partie  Partie         @relation(fields: [partieId], references: [id])
  joueurs EquipeJoueur[]
  scores  ScoreManche[]
}

model EquipeJoueur {
  equipeId   Int
  joueurId   Int
  ordreSiege Int

  equipe Equipe @relation(fields: [equipeId], references: [id])
  joueur Joueur @relation(fields: [joueurId], references: [id])

  @@id([equipeId, joueurId])
}

model Manche {
  id               Int      @id @default(autoincrement())
  partieId         Int
  numero           Int
  couleurAtoutId   Int?
  donneurJoueurId  Int?
  beloteJoueurId   Int?
  createdAt        DateTime @default(now())
  carteRetourneeId Int?

  // Etat d'enchère

  tourActuel     Int   @default(1) // Tour 1 ou 2                       
  joueurActuelId Int // Joueur à qui c'est de parler                  
  preneurId      Int? // Déterminé lorsque quelqu'un prend             
  paquet         Int[] // Ordre du paquet (32 ids de Carte)    

  statut MancheStatut @default(active)

  partie           Partie   @relation("Partie_Manches", fields: [partieId], references: [id])
  partieCouranteDe Partie?  @relation("Partie_MancheCourante")
  couleurAtout     Couleur? @relation("CouleurAtout", fields: [couleurAtoutId], references: [id])
  donneur          Joueur?  @relation("Donneur", fields: [donneurJoueurId], references: [id])
  beloteJoueur     Joueur?  @relation("Beloteur", fields: [beloteJoueurId], references: [id])
  carteRetournee   Carte?   @relation("CarteRetournee", fields: [carteRetourneeId], references: [id])

  mains    Main[]
  encheres Enchere[]
  plis     Pli[]
  scores   ScoreManche[]
}

enum MancheStatut {
  active
  relancee
  terminee
}

model Main {
  id       Int     @id @default(autoincrement())
  joueurId Int
  mancheId Int
  carteId  Int
  jouee    Boolean @default(false)

  joueur Joueur @relation(fields: [joueurId], references: [id])
  manche Manche @relation(fields: [mancheId], references: [id])
  carte  Carte  @relation(fields: [carteId], references: [id])

  @@unique([mancheId, joueurId, carteId])
}

model Enchere {
  id             Int         @id @default(autoincrement())
  joueurId       Int
  mancheId       Int
  valeur         String
  enchereType    EnchereType
  couleurAtoutId Int?
  encherePoints  Int?
  createdAt      DateTime    @default(now())

  joueur       Joueur   @relation(fields: [joueurId], references: [id])
  manche       Manche   @relation(fields: [mancheId], references: [id])
  couleurAtout Couleur? @relation(fields: [couleurAtoutId], references: [id])
}

enum EnchereType {
  pass
  take_card
  choose_color
}

model Pli {
  id        Int  @id @default(autoincrement())
  mancheId  Int
  numero    Int
  gagnantId Int?

  manche  Manche     @relation(fields: [mancheId], references: [id])
  gagnant Joueur?    @relation("GagnantPli", fields: [gagnantId], references: [id])
  cartes  PliCarte[]
}

model PliCarte {
  id       Int @id @default(autoincrement())
  pliId    Int
  joueurId Int
  carteId  Int
  ordre    Int

  pli    Pli    @relation(fields: [pliId], references: [id])
  joueur Joueur @relation(fields: [joueurId], references: [id])
  carte  Carte  @relation(fields: [carteId], references: [id])
}

model Lobby {
  id         Int      @id @default(autoincrement())
  partieId   Int?     @unique
  nom        String
  password   String?
  createurId Int
  createdAt  DateTime @default(now())
  statut     String   @default("en_attente")

  partie   Partie?       @relation(fields: [partieId], references: [id])
  createur Joueur        @relation("CreateurLobby", fields: [createurId], references: [id])
  membres  LobbyJoueur[]

  visibility LobbyVisibility @default(public)
  invites    LobbyInvite[]
}

model LobbyJoueur {
  lobbyId   Int
  joueurId  Int
  createdAt DateTime @default(now())

  lobby  Lobby  @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  joueur Joueur @relation(fields: [joueurId], references: [id], onDelete: Cascade)

  @@id([lobbyId, joueurId])
  @@index([joueurId])
}

model ScoreManche {
  id        Int      @id @default(autoincrement())
  mancheId  Int
  equipeId  Int
  points    Int
  createdAt DateTime @default(now())

  manche Manche  @relation(fields: [mancheId], references: [id])
  equipe Equipe  @relation(fields: [equipeId], references: [id])
  bonus  Bonus[]
}

model Bonus {
  id           Int       @id @default(autoincrement())
  scoreboardId Int
  type         BonusType
  points       Int

  score ScoreManche @relation(fields: [scoreboardId], references: [id])
}
model FriendRequest {
  id        Int      @id @default(autoincrement())
  fromId    Int
  toId      Int
  status    String   @default("pending") // 'pending' | 'accepted' | 'rejected' | 'cancelled'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  from      Joueur   @relation("FriendRequestFrom", fields: [fromId], references: [id])
  to        Joueur   @relation("FriendRequestTo", fields: [toId], references: [id])

  @@unique([fromId, toId, status])
  @@index([fromId])
  @@index([toId])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  aId       Int
  bId       Int
  createdAt DateTime @default(now())

  a         Joueur   @relation("FriendshipA", fields: [aId], references: [id])
  b         Joueur   @relation("FriendshipB", fields: [bId], references: [id])

  @@unique([aId, bId])
  @@index([aId])
  @@index([bId])
}
model LobbyInvite {
  id        Int               @id @default(autoincrement())
  lobbyId   Int
  fromId    Int
  toId      Int
  status    LobbyInviteStatus @default(sent)
  createdAt DateTime          @default(now())

  lobby     Lobby             @relation(fields: [lobbyId], references: [id])
  from      Joueur            @relation("LobbyInviteFrom", fields: [fromId], references: [id])
  to        Joueur            @relation("LobbyInviteTo", fields: [toId], references: [id])

  @@index([lobbyId])
  @@index([toId])
  @@unique([lobbyId, toId, status]) // 1 invite “active” par lobby & destinataire
}
model Notification {
  id          Int                 @id @default(autoincrement())
  type        NotificationType
  senderId    Int
  receiverId  Int
  message     String
  data        Json?               // Données supplémentaires (requestId, lobbyId, etc.)
  read        Boolean             @default(false)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  sender      Joueur              @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    Joueur              @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([receiverId])
  @@index([createdAt])
  @@index([type])
}

enum NotificationType {
  FRIEND_REQUEST
  FRIEND_ACCEPTED
  LOBBY_INVITE
  GAME_STARTED
  TURN_NOTIFICATION
  BELOTE_DECLARED
}

enum BonusType {
  belote
  capot
  dix_de_der
}
enum LobbyVisibility {
  public
  friends
  private
}

enum LobbyInviteStatus {
  sent
  accepted
  declined
  expired
}

